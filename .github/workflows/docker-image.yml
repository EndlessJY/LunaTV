name: Build & Push Docker image

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker 标签'
        required: false
        default: 'latest'
        type: string
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  actions: write
  packages: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            os: ubuntu-latest
          - platform: linux/arm64
            os: ubuntu-24.04-arm
    runs-on: ${{ matrix.os }}

    steps:
      - name: Prepare platform name
        run: |
          echo "PLATFORM_NAME=${{ matrix.platform }}" | sed 's|/|-|g' >> $GITHUB_ENV

      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository owner
        id: lowercase
        run: echo "owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: Extract version from CHANGELOG
        id: version
        run: |
          VERSION=$(grep -m1 "^## \[" CHANGELOG | sed 's/^## \[\(.*\)\] - .*/\1/')
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Current version: $VERSION"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            endlessjy/lunatv
            ghcr.io/${{ steps.lowercase.outputs.owner }}/lunatv
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=match,pattern=v(.*),group=1,enable={{is_default_branch}}
            type=raw,value=${{ steps.version.outputs.version }},enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.tag || 'latest' }},enable={{is_default_branch}}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=endlessjy/lunatv,push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_NAME }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository owner
        id: lowercase
        run: echo "owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Extract version from CHANGELOG
        id: version
        run: |
          VERSION=$(grep -m1 "^## \[" CHANGELOG | sed 's/^## \[\(.*\)\] - .*/\1/')
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Current version: $VERSION"

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          # 提取版本号
          VERSION="${{ steps.version.outputs.version }}"
          INPUT_TAG="${{ github.event.inputs.tag || 'latest' }}"
          OWNER="${{ steps.lowercase.outputs.owner }}"

          echo "=== Available digests ==="
          ls -la
          echo "========================"

          # 获取所有 digest 文件
          DIGESTS=$(ls)

          # 如果是主分支推送，创建版本标签和latest标签
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "Creating version tag: $VERSION"

            # 创建 DockerHub 的版本标签
            if [[ -n "$DIGESTS" ]]; then
              docker buildx imagetools create -t endlessjy/lunatv:$VERSION \
                $(printf 'endlessjy/lunatv@sha256:%s ' $DIGESTS)
            fi

            # 创建 DockerHub 的 latest 标签
            if [[ -n "$DIGESTS" ]]; then
              docker buildx imagetools create -t endlessjy/lunatv:latest \
                $(printf 'endlessjy/lunatv@sha256:%s ' $DIGESTS)
            fi

            echo "Copying to GitHub Container Registry..."

            # 复制到 GHCR
            if [[ -n "$DIGESTS" ]]; then
              # 复制版本标签到 GHCR
              docker buildx imagetools create -t ghcr.io/$OWNER/lunatv:$VERSION \
                endlessjy/lunatv:$VERSION

              # 复制 latest 标签到 GHCR
              docker buildx imagetools create -t ghcr.io/$OWNER/lunatv:latest \
                endlessjy/lunatv:latest
            fi
          fi

          # 如果是Git标签推送，创建对应版本标签并更新latest
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            GIT_TAG="${{ github.ref_name }}"
            TAG_VERSION="${GIT_TAG#v}"
            echo "Creating Git tag version: $TAG_VERSION"

            # 创建 DockerHub 的 Git 标签版本
            if [[ -n "$DIGESTS" ]]; then
              docker buildx imagetools create -t endlessjy/lunatv:$TAG_VERSION \
                $(printf 'endlessjy/lunatv@sha256:%s ' $DIGESTS)

              # 更新 DockerHub 的 latest 标签
              docker buildx imagetools create -t endlessjy/lunatv:latest \
                $(printf 'endlessjy/lunatv@sha256:%s ' $DIGESTS)
            fi

            echo "Copying to GitHub Container Registry..."

            # 复制到 GHCR
            if [[ -n "$DIGESTS" ]]; then
              # 复制 Git 标签版本到 GHCR
              docker buildx imagetools create -t ghcr.io/$OWNER/lunatv:$TAG_VERSION \
                endlessjy/lunatv:$TAG_VERSION

              # 更新 GHCR 的 latest 标签
              docker buildx imagetools create -t ghcr.io/$OWNER/lunatv:latest \
                endlessjy/lunatv:latest
            fi
          fi

          # 如果是手动触发且指定了非latest标签，创建该标签（但不更新latest）
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "$INPUT_TAG" != "latest" ]]; then
            echo "Creating manual tag: $INPUT_TAG"

            # 创建 DockerHub 的自定义标签
            if [[ -n "$DIGESTS" ]]; then
              docker buildx imagetools create -t endlessjy/lunatv:$INPUT_TAG \
                $(printf 'endlessjy/lunatv@sha256:%s ' $DIGESTS)
            fi

            # 复制到 GHCR
            if [[ -n "$DIGESTS" ]]; then
              docker buildx imagetools create -t ghcr.io/$OWNER/lunatv:$INPUT_TAG \
                endlessjy/lunatv:$INPUT_TAG
            fi
          fi

  cleanup-refresh:
    runs-on: ubuntu-latest
    needs:
      - merge
    if: always()
    steps:
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 2
